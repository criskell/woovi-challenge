type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  products(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): ProductConnectionConnection!
  hello: String
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""A connection to a list of items."""
type ProductConnectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductConnectionEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type ProductConnectionEdge {
  """The item at the end of the edge"""
  node: Product

  """A cursor for use in pagination"""
  cursor: String!
}

type Product implements Node {
  """The ID of an object"""
  id: ID!
  name: String!
  description: String!
  priceInCents: String!
}

type Mutation {
  createProduct(input: createProductInput!): createProductPayload
  updateProduct(input: updateProductInput!): updateProductPayload
  removeProduct(input: removeProductInput!): removeProductPayload
}

type createProductPayload {
  product: Product
  clientMutationId: String
}

input createProductInput {
  name: String!
  description: String!
  priceInCents: Int!
  clientMutationId: String
}

type updateProductPayload {
  product: Product
  clientMutationId: String
}

input updateProductInput {
  id: ID
  name: String
  description: String
  priceInCents: Int
  clientMutationId: String
}

type removeProductPayload {
  product: Product
  clientMutationId: String
}

input removeProductInput {
  productId: ID!
  clientMutationId: String
}